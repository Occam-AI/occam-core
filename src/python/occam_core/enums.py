from enum import Enum


class ToolState(str, Enum):
    """
    These are are both stable instance states,
    absent a run, as well as run related states.
    """

    # alive means the python instance is live somewhere
    ALIVE = "ALIVE"
    """A tool is alive means the python instance is live somewhere and ready to receive a run request."""

    SLEEPING = "SLEEPING"
    """A tool is sleeping when it's not running, but the db has all the instance info."""

    # Request in progress states
    PAUSE_IN_PROGRESS = "PAUSE_IN_PROGRESS"
    RESUME_IN_PROGRESS = "RESUME_IN_PROGRESS"
    STOP_IN_PROGRESS = "STOP_IN_PROGRESS"
    """Once a tool receives a request, it will transition to the appropriate in progress state."""

    # Run related states
    RUNNING = "RUNNING"
    PAUSED = "PAUSED"
    """A tool run can switch between RUNNING and PAUSED states."""

    BATCH_COMPLETED = "BATCH_COMPLETED"
    FAILED = "FAILED"
    STOPPED = "STOPPED"
    """These are terminal states that a tool can be in."""


class ToolRunState(str, Enum):
    """
    These are run related states
    """

    PAUSE_IN_PROGRESS = "PAUSE_IN_PROGRESS"
    RESUME_IN_PROGRESS = "RESUME_IN_PROGRESS"
    STOP_IN_PROGRESS = "STOP_IN_PROGRESS"

    RUNNING = "RUNNING"
    PAUSED = "PAUSED"

    BATCH_COMPLETED = "BATCH_COMPLETED"
    FAILED = "FAILED"
    STOPPED = "STOPPED"


class ToolRunSubStatus(str, Enum):
    # TODO: Implement
    ...



class ToolDataType(str, Enum):
    """
    This list defines the different categories of data
    that can agent can send.
    """

    USER_SCREEN_MESSAGES = "USER_SCREEN_MESSAGES"
    """A message generated by the user from a ux interface, which abides by the user agent message model."""

    STREAMING_UPDATES = "STREAMING_UPDATES"
    """Internal updates sent back from the tool sometimes this won't exist."""

    RUN_STEP_COMPLETED = "RUN_STEP_COMPLETED"
    """Data sent back when the tool announces that a batch step has completed."""

    OUTPUT = "OUTPUT"
    """Data sent back when the tool announces that it's completed a full streaming/batch run"""

    PAUSED = "PAUSED"
    """Data sent back when the tool announces that it's paused"""

    RESUMED = "RESUMED"
    """Data sent back when the tool announces that it's resumed"""

    STOPPED = "STOPPED"
    """Data sent back when the tool announces that it's stopped
    due to a termination request."""


class BatchStepDataType(str, Enum):
    """
    This list defines the different types of data
    that a tool can send when in batch mode.
    """

    RUN_STEP_COMPLETED = "RUN_STEP_COMPLETED"
    """Data sent back when the tool announces that a batch step has completed."""

    PAUSED = "PAUSED"
    """Data sent back when the tool announces that it's paused"""

    STOPPED = "STOPPED"
    """Data sent back when the tool announces that it's stopped
    due to a termination request."""

    RESUMED = "RESUMED"
    """Data sent back when the tool announces that it's resumed"""


class StreamingStepDataType(str, Enum):
    """
    This list defines the different types of data
    that a tool can send in streaming mode.
    """

    STREAMING_UPDATES = "STREAMING_UPDATES"
    """Internal updates sent back from the tool sometimes this won't exist."""

    RUN_STEP_COMPLETED = "RUN_STEP_COMPLETED"
    """Data sent back when the tool announces that a batch step has completed."""

    PAUSED = "PAUSED"
    """Data sent back when the tool announces that it's paused"""

    STOPPED = "STOPPED"
    """
    Data sent back when the tool announces that it's stopped
    due to a termination request.
    """

    RESUMED = "RESUMED"
    """Data sent back when the tool announces that it's resumed"""


STABLE_STATES = {
    ToolState.ALIVE,
    ToolState.SLEEPING,
    ToolState.PAUSED,
    ToolState.BATCH_COMPLETED,
    ToolState.FAILED,
    ToolState.STOPPED,
}

STOPPABLE_STATES = {
    ToolState.RUNNING,
    ToolState.PAUSED,
    ToolState.FAILED,
    ToolState.RESUME_IN_PROGRESS,
    ToolState.PAUSE_IN_PROGRESS,
}

PAUSABLE_STATES = {
    ToolState.RUNNING,
    ToolState.RESUME_IN_PROGRESS,
}


RESUMABLE_STATES = {
    ToolState.PAUSED,
    ToolState.FAILED,
}
